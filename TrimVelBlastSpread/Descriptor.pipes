Properties: {
    author: "NGSPipes Team"
    description: "Study case 1"
    version:  "1.0"
    documentation: ["http://ngspipes.readthedocs.io/en/latest/RunningExamples.html"]
}

Repositories: [
    ToolRepository repo: {
        location: "https://github.com/ngspipes2/tools_support"
        config: {
            username: "NGSPipesShare"
            token: "4104311fb1a5db310b2eed6f765a168355d7cbd8"
        }
    }
]

Outputs: {
    output1: trimmomatic[outputFile]
    output2: blastx[outFile]
}

Steps: [
    Step trimmomatic: {
        exec: repo[Trimmomatic][trimmomatic]
        execution_context: "DockerConfig"
        inputs: {
            mode: "SE"
            quality: "phred33"
            inputFile1: "ERR406040.fastq"
            output: "ERR406040.filtered.fastq"
            fastaWithAdaptersEtc: "TruSeq3-SE.fa"
            seedMismatches: 2
            palindromeClipThreshold: 30
            simpleClipThreshold: 10
            windowSize: 4
            requiredQuality: 15
            leadingQuality: 3
            trailingQuality: 3
            minlenLength: 36
        }
    }
    Step velveth: {
        exec: repo[Velvet][velveth]
        execution_context: "DockerConfig"
        inputs: {
            outputDirectory: "velvetdir"
            hashLength: 21
            fileFormat: "fastq"
            filename: trimmomatic[outputFile]
        }
    }
    Step velvetg: {
        exec: repo[Velvet][velvetg]
        execution_context: "DockerConfig"
        inputs: {
            outputDirectory: velveth[outDir]
            covCutoff: 5
        }
    }
    Step makeblastdb: {
        exec: repo[Blast][makeblastdb]
        execution_context: "DockerConfig"
        inputs: {
            dbtype: "prot"
            out: ["allrefs", "allrefsB", "allrefsC"]
            title: ["allrefs", "allrefsB", "allrefsC"]
            in: ["allrefs.fna.pro", "allrefs.fnaB.pro","allrefs.fnaC.pro"]
        }
    	spread: {
    	    inputs_to_spread: [in, out, title]
    	    strategy: one_to_one(in, one_to_one(out, title))
    	}
    }
    Step blastx: {
        exec: repo[Blast][blastx]
        execution_context: "DockerConfig"
        inputs: {
            db: makeblastdb[outFileName]
            query: velvetg[contigsFa]
            out: ["blast.out", "blastB.out", "blastC.out"]
        }
    	spread: {
    	    inputs_to_spread: [db, out]
    	    strategy: one_to_one(db, out)
    	}
    }
]
